1 - artisan command :
php artisan make:model Book (options)
options :
	-m (migration by dafult ot will have the same name of the model as but pleuralized books)
	-c controller (default name: BookController)
	-r stands for ressources (crud functions to the controller)
	-f factory
	-a all <=> -mcrf

--help : gives all the options that you can add to the artisan command 

-----------------------------------------------------------------
2 - naming convention : Model Post => posts (table) => PostController
				PostComment => post_comments (table) =>PostCommentController

-----------------------------------------------------------------
3 - guarded and fillable (guarded is the opposite of fillable)
	to save a record :
	1=> intansiate the save 
		$artcile = new Article(); acrticle->title = $request->title ..... $article.save()
		Article::create($request.all()) or $request.only('title', 'content')
-----------------------------------------------------------------
4 - other model attributes:
	table (specify table related to the model)
	primaryKey( specify the primary key of the table)
	incrementing (false means that id is not autoincrement)
	perPage (for pagination how many results for pagination)
	//articles->links() : generate pagination bootsrap (we have this when we do Article::paginate()
	timestamps = flase (if table doesn't have timestamps) (else it will generate an error ?? confirm that)
	dateFoemat => to change date format
-----------------------------------------------------------------
5 - firstOrFail(arg1, arg2) / firstOrNew
	check whether it exitsts , if it exists it will not execute the second arg
	else it will.
	arg1 is automatically included in arg2

	firstOrNew exactly like firstOrfail but it will instantiate 
	you have to add .save 

	updateOrcreate
-----------------------------------------------------------------
6 - Observers 
	do an action when something happens to a model, (creation, update delete)
	log, send notifications...
	we can do this directly in the controller but good practices is to keep
	controllers as thin as possible 
	use Observer class
	php artisan make:observer ArticleObserver --model=Article
	then we will have to register the observer in serviceProvider(boot function)
	Log::info() or just info()

	other use case 
	creating function => articlr->user_id = auth()->id;
-----------------------------------------------------------------
7 - accessors 
	get field that doesn't exist in the db 
	getFullNameAttribute () (user->full_name(snake_case))
    modificators
	modify attribute before it's saved to DB 
	setFieldAttrbute ($value){ $this->attributes["name"] = uppercase($value ) }
-----------------------------------------------------------------
8 - seeders 
	data to seed whenever luanch a project (admin user)
	$thsi->call(ArticleSeederClass)
    factories (automation)
	fake 
	register the factory
	call the factory from seeder class (UserSeeder)
	
	php artisan migrate:fresh --seed
----------------------------------------------------------------
9 - factories with foreign key (user_id) ?
	use rand(1, 50)
	use inRandomOrder()->first()->id
----------------------------------------------------------------
10 -  all([fields to select])
	find(id, [fields to select]) | find([ids], [fields to select])
	findOrFail()
	where()->firstOrFail()
---------------------------------------------------------------
11 -  whereDay, whereYear, whereTime, orWhereYear ...
---------------------------------------------------------------
12 -  sql brackets where callback function
	toSql usefull for debugging
---------------------------------------------------------------
13 - scopes 
	function scopeNewst($query) {} // get newest articles less then 30 days
	usefull if we do the query so many times 


	boot function (GlobalScopes) get this from the documentaion 
	it will be executed in every query 
	we can use ::withNotGlobalScope to nit be executed in the current query 
---------------------------------------------------------------
14 - conditional quering 
	$query = Article::query();
	if ($request('title')){ query->where()}
	if ($request('oo')){ query->where()}
	...
	$query->get()

or use when syntax (exactly the same principle)
---------------------------------------------------------------
15 - orderBy (sql) sortBy (collections)
	::all()->sortby(some attrbiute calculated on the fly (get aceesessor))

	sortByDesc 
---------------------------------------------------------------
	raw queries (sql query)
---------------------------------------------------------------
collections filter(return (filtring condtion))->map(return ...)
---------------------------------------------------------------
collections method :
deroulant list (send itemes from create function)
// User::select() to select only fields that we need 
->prepend() // add an item to a collection 
->shuffle() // to randomize 

pluck method (id => name)
chunk(n) => group results n rows

-> random() // pick one ranom user
filters
->contains('password', 'mmmm'); // contains('field_name', 'value)
User::all()->each(function($user){ // do something})
	     ->map(function(){// return something  })

->avg() // calculate the average of a certain collection 

->filter(function($user){return condtion})
// for axample return users that are adults 
return $user->age >= 18
->reject // similar to ->filter 
-----------------------------------------------------------------
mathhemathical operations eloquent :
->count(field_name)
->avg(), ->sum(field_name)
 -----------------------------------------------------------------
debugging methods :
dd (dump and die)
dump (just sump but not die)*
-----------------------------------------------------------------
polymorphic relationship
post can have a photo, user can have a photo, comment can have a photo
several solutions 
one of them:
photos database add: imageable_id and imageable_type 
// there is no foreign key here (fake foreign keys)
// make sure that they are fillable 
add imageable function to photo model 
// same name as the column function (photoable_id -> photoable, imageable_id -> imageable ...)
return $this.morphTo(); // don't specify anything 
add photos function //morph many  relationship 
return $this->morhMany('model', ''function name);
return $this->morhMany('App\Models\Photo', 'imageable');

Product:all()->with('photos')->get();

// blade 
foreach($posts->photos as $photo){
	{{ $loop->iteration }}
	{{ $photo }}
}

// creating 
// create post 
$post = Post::create(..);
// create photos using $post->id;
----------------------------------------------------------------------
polymorphic many to many (photo can belong to product and post meanwhile)
----------------------------------------------------------------------
many to many relation ships pivot table post_user (bloongsToMany)
belongsToMany autocomplete give 4 params (model, pivot_table, fk, lk)
attach and sync 
	attach allow duplicates 
	sync disable duplicates 

--- pivot table attributes 
	attach(1, ["confirmed"=>true]) // why this doesn't work with async ?

->withTimeStamps
->pivot([attributes])
accessing pivot table attributes 
filter pivot table attributes (add wherePivot)
----------------------------------------------------------------------
hasManyThrought 
Role -> user -> post 

role -> post 
In Role model add has many throught relationship (posts method)
posts hasmanyThrought(/**what class **/ Post::class, /** throught **/ User::class)
-----------------------------------------------------------------------
$author = firstOrCreate()
Book::create([
   'author_id' => $author->id 
])

// another way 
$author->books()->create(["title" => )
// 
create multiple books for a single author 
use a foreach loop 
// another way
$author->books()->createMany([
	['title'=> "t1"],
	['title'=> "t2"],  // how to obtain this format ? convert first to Collection Object by using collect to use map method then convert to array again usin toArray
])
------------------------------------------------------------------------------
filtering multiple tables 
**aproach 1: using query builder
  Book::join()->where()->where()....
**aproach 2: using elequont:
  $filteredAuthor = Author()::where ....
  $result = $filteredAuthor->books()->where( .. query about books 

has('books') // get author that have at least one book
doesntHave('books') // opppsite
has('books', '>', 4)

// get authors that have rated books 
has('books.rating');
-----------------------------------------------------------------------------
eager loading 
->with(relationship)

or use load()
$books = Book::wher()....;
$books = $books.load("author");
---------------------------------------------------------------------------
@forelse
...
@empty 
	no article yet

$article->load() // eager loading 

enctype="multipart/form-data" very important to upload file
run this comman to show the image correctly (make storage public)
php artisan storage:link


policies :
make:policy ModelPolicy --model=Model 
=> register in authservice provider // guided in the comments of ths file (authservice ....)
//functions come with User parameter which is very helpful
use it in functions $this->othorize('delete', $delete);


Observers:
make:observer ModelObserver --model=Model
// available methodes : created, updated, deleted ... (--model=Model will add all the available method for observation)
=> register by adding the following line to the boot function of app service provider
Model::observe(ModelObserver::class);